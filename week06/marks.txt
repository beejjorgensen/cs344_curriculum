Linked list nodes padded to proper alignment (15)

Data padded to proper alignment (15)

First call to `myalloc()` calls `sbrk()` to allocate space (10)

`myalloc()` returns `NULL` if no more space is available. (10)

All calls to `myalloc()` traverse the linked list searching for a free
node with enough space to hold the requested amount. (15)

`struct block` `size` field computed correctly (size is padded to 16
byte alignment, doesn't count the `struct block` size itself) (10)

Blocks' in-use flags set correctly.  (10)

Print list prints `[empty]` when list empty (5)

Print list prints the list properly when not empty (5)

----------

-10 Doesn't return NULL if all space is allocated.

-5 Linked List walk not correct.

-10 Doesn't return NULL properly if space not found.


----------
There's a logic error that's causing it to hand out the first block again even though it was already allocated.

Have the loop walk while current is not NULL. (Have current walk off the end.)

Inside the loop, have an `if` that checks if the block is free and big enough.

If it is, return it.

If the loop completes, a useful block must not have been found. Return NULL.
----------
To make it more `malloc()`-like, you could make `head` a global with the `static` keyword:

```
static struct block *head;
```

This way you wouldn't have to pass it to the function, and the `static` keyword means that `head` wouldn't be visible outside of this file.
----------
The catch with the Makefile is that the indentations have to be a single TAB character, not a group of spaces. You'll have to set your editor in tabs mode.

It's more common to capitalize the M in Makefile, too. A smart editor might switch to tab mode automatically when editing a file with that name.

As soon as I replaced the spaces with a tab, it started working.

The sure sign you've used spaces is the error:

```
*** missing separator.  Stop.
```

----------
Officially, there are only two legal ways to declare `main()`:

```
int main(void)
int main(int argc, char *argv[])  // or equivalent
```

You need to make a copy of `head` before you walk the list with it.

```
struct block *cur = head;

while (cur != NULL) {
    ...
    cur = cur->next;
}
```

As it is, you walk head to NULL each time, so every time I call the function `sbrk()` gets called (unless a good block is found.

For example, if I call these:

```
myalloc(99999);
myalloc(10);
```

`sbrk()` gets called twice, one for each `myalloc()` call.

Also, the case where you return `NULL` isn't going to work this week--it's saying "if I find a block that's in use that would have worked, fail immediately".

But what we want if we find a block that's in use is to walk to the next block and keep trying until we run off the list.

You can remove that second `if` from inside the loop. And...

...then return `NULL` at the end of the function. This is the line of code that will be hit if you walked the list and didn't find anything.

Also, I was getting a warning on that since the function wasn't returning a value. Always fix all warnings in C!

